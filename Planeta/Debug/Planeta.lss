
Planeta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  000001b0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000b0  008000b0  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c7  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000694  00000000  00000000  00000b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cd  00000000  00000000  000011a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000385  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ad  00000000  00000000  00001979  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001b26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 eb       	ldi	r26, 0xB0	; 176
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3b       	cpi	r26, 0xB2	; 178
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8a:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USARTInit>:
}

void USARTTransmitChar(char c) {
	//  Устанавливается, когда регистр свободен
	while(!( UCSRA & (1<<UDRE)));
	UDR = c;
  92:	10 bc       	out	0x20, r1	; 32
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	89 b9       	out	0x09, r24	; 9
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	8b b9       	out	0x0b, r24	; 11
  9c:	88 e9       	ldi	r24, 0x98	; 152
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	8e e8       	ldi	r24, 0x8E	; 142
  a2:	80 bd       	out	0x20, r24	; 32
  a4:	08 95       	ret

000000a6 <__vector_11>:
}

ISR(USART_RXC_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	DATA_AVAL = 1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
	NEW_DATA = UDR;
  b8:	8c b1       	in	r24, 0x0c	; 12
  ba:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <NEW_DATA>
}
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <write>:
};

  
void write()
{
	PORTD &= ~WR;
  ca:	96 98       	cbi	0x12, 6	; 18
	//_delay_ms(50);
	PORTD |= WR;
  cc:	96 9a       	sbi	0x12, 6	; 18
  ce:	08 95       	ret

000000d0 <init>:
}

void init()
{
	DDRA = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x0F;
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	97 bb       	out	0x17, r25	; 23
	DDRC = 0xFF;
  d8:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xE0;
  da:	80 ee       	ldi	r24, 0xE0	; 224
  dc:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
  de:	12 ba       	out	0x12, r1	; 18
	//настройка всех портов МК на вывод
	PORTD |= RD;
  e0:	97 9a       	sbi	0x12, 7	; 18
	//опускание линии RD (чтения) в ноль, он нам вообще не нужен
	PORTA = MODE_0;
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	8b bb       	out	0x1b, r24	; 27
	//подготавливаем управляющее слово
	PORTC = (1<<CS0)|(1<<A0)|(1<<A1);
  e6:	83 e4       	ldi	r24, 0x43	; 67
  e8:	85 bb       	out	0x15, r24	; 21
	write();
  ea:	0e 94 65 00 	call	0xca	; 0xca <write>
	PORTC = (1<<CS1)|(1<<A0)|(1<<A1);
  ee:	83 e8       	ldi	r24, 0x83	; 131
  f0:	85 bb       	out	0x15, r24	; 21
	write();
  f2:	0e 94 65 00 	call	0xca	; 0xca <write>
	//настриваем в обе микросхемы режим 0
	//посылакем строб записи
	PORTA = 0;
  f6:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0;
  f8:	15 ba       	out	0x15, r1	; 21
  fa:	08 95       	ret

000000fc <main>:
}


int main(void)
{
	init();
  fc:	0e 94 68 00 	call	0xd0	; 0xd0 <init>
	USARTInit(MYUBRR);
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 49 00 	call	0x92	; 0x92 <USARTInit>
	sei();
 108:	78 94       	sei
 10a:	00 e6       	ldi	r16, 0x60	; 96
 10c:	10 e0       	ldi	r17, 0x00	; 0
		
		for (unsigned char x=0;x<5;x++)
		{
			PORTA = 0;
			PORTC = 0;
			PORTB = 0x0F;
 10e:	0f 2e       	mov	r0, r31
 110:	ff e0       	ldi	r31, 0x0F	; 15
 112:	ef 2e       	mov	r14, r31
 114:	f0 2d       	mov	r31, r0
	unsigned char y = 0;
	while (1) 
    {
		y = 0;
		
		if(DATA_AVAL == 1)
 116:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_end>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	09 f0       	breq	.+2      	; 0x120 <main+0x24>
 11e:	41 c0       	rjmp	.+130    	; 0x1a2 <main+0xa6>
 120:	ef ea       	ldi	r30, 0xAF	; 175
 122:	f0 e0       	ldi	r31, 0x00	; 0
		{
			for(int l = 79; l>0;l--)
			{
				stroka[l] = stroka[l-1];
 124:	82 91       	ld	r24, -Z
 126:	81 83       	std	Z+1, r24	; 0x01
    {
		y = 0;
		
		if(DATA_AVAL == 1)
		{
			for(int l = 79; l>0;l--)
 128:	0e 17       	cp	r16, r30
 12a:	1f 07       	cpc	r17, r31
 12c:	d9 f7       	brne	.-10     	; 0x124 <main+0x28>
			{
				stroka[l] = stroka[l-1];
			}
			stroka[0] = NEW_DATA;
 12e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <NEW_DATA>
 132:	f8 01       	movw	r30, r16
 134:	80 83       	st	Z, r24
			DATA_AVAL = 0;
 136:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__data_end>
 13a:	33 c0       	rjmp	.+102    	; 0x1a2 <main+0xa6>
		}
		
		for (unsigned char x=0;x<5;x++)
		{
			PORTA = 0;
 13c:	1b ba       	out	0x1b, r1	; 27
			PORTC = 0;
 13e:	15 ba       	out	0x15, r1	; 21
			PORTB = 0x0F;
 140:	e8 ba       	out	0x18, r14	; 24
			if(x>2) 
 142:	f2 e0       	ldi	r31, 0x02	; 2
 144:	ff 15       	cp	r31, r15
 146:	38 f4       	brcc	.+14     	; 0x156 <main+0x5a>
			{
				PORTC |= (1<<CS1);
 148:	af 9a       	sbi	0x15, 7	; 21
				PORTC |= x-3;
 14a:	85 b3       	in	r24, 0x15	; 21
 14c:	9d ef       	ldi	r25, 0xFD	; 253
 14e:	9f 0d       	add	r25, r15
 150:	89 2b       	or	r24, r25
 152:	85 bb       	out	0x15, r24	; 21
 154:	29 c0       	rjmp	.+82     	; 0x1a8 <main+0xac>
			}
			else
			{
				PORTC |= (1<<CS0);
 156:	ae 9a       	sbi	0x15, 6	; 21
				PORTC |= x;
 158:	85 b3       	in	r24, 0x15	; 21
 15a:	8f 29       	or	r24, r15
 15c:	85 bb       	out	0x15, r24	; 21
 15e:	24 c0       	rjmp	.+72     	; 0x1a8 <main+0xac>
			//write();
			//_delay_ms(500);
			
			for(unsigned char i = 0;i<16;i++)
			{
				PORTA = stroka[y];
 160:	ed 2f       	mov	r30, r29
 162:	ec 0f       	add	r30, r28
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e0 5a       	subi	r30, 0xA0	; 160
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	80 81       	ld	r24, Z
 16c:	8b bb       	out	0x1b, r24	; 27
				y++;
				PORTB = (~(i)&0x07);
 16e:	8c 2f       	mov	r24, r28
 170:	80 95       	com	r24
 172:	87 70       	andi	r24, 0x07	; 7
 174:	88 bb       	out	0x18, r24	; 24
				if(i>=8)
 176:	c8 30       	cpi	r28, 0x08	; 8
 178:	10 f0       	brcs	.+4      	; 0x17e <main+0x82>
				{
					PORTB &= ~(1<<3);
 17a:	c3 98       	cbi	0x18, 3	; 24
 17c:	01 c0       	rjmp	.+2      	; 0x180 <main+0x84>
					
				}
				else
				{
					PORTB |= (1<<3);
 17e:	c3 9a       	sbi	0x18, 3	; 24
				}
				write();
 180:	0e 94 65 00 	call	0xca	; 0xca <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	82 e4       	ldi	r24, 0x42	; 66
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x8a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x90>
				_delay_us(200);
				PORTA = 0;
 18c:	1b ba       	out	0x1b, r1	; 27
				write();
 18e:	0e 94 65 00 	call	0xca	; 0xca <write>
				PORTC |= x;
			}
			//write();
			//_delay_ms(500);
			
			for(unsigned char i = 0;i<16;i++)
 192:	cf 5f       	subi	r28, 0xFF	; 255
 194:	c0 31       	cpi	r28, 0x10	; 16
 196:	21 f7       	brne	.-56     	; 0x160 <main+0x64>
 198:	d0 5f       	subi	r29, 0xF0	; 240
			}
			stroka[0] = NEW_DATA;
			DATA_AVAL = 0;
		}
		
		for (unsigned char x=0;x<5;x++)
 19a:	f3 94       	inc	r15
 19c:	d0 35       	cpi	r29, 0x50	; 80
 19e:	71 f6       	brne	.-100    	; 0x13c <main+0x40>
 1a0:	ba cf       	rjmp	.-140    	; 0x116 <main+0x1a>
	PORTC = 0;
}


int main(void)
{
 1a2:	f1 2c       	mov	r15, r1
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	ca cf       	rjmp	.-108    	; 0x13c <main+0x40>
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	da cf       	rjmp	.-76     	; 0x160 <main+0x64>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
